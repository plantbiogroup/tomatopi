#!/usr/bin/python
#
# This file works with the 'phytonaut.py file.  It uploads
# measurements on url encoded form to the server and gets the desired
# conrol values back.

import StringIO
import json
import os
import pycurl
import sys
import urllib
import datetime
import time
import ConfigParser

outbuf = StringIO.StringIO()

field = {}

def get_desired(relay_num):
    if relay_num < 1 or relay_num > max_relay:
        return 'off'
    try:
        with open('%s%d' % (desired_relay_file, relay_num), 'r') as f:
            val=f.read().strip()
    except:
        val = 'off'
    return val

def set_hour_minute(timestring):
    now=datetime.datetime.now()
    hour, minute, second = timestring.split(':')
    dt = datetime.datetime(now.year, now.month, now.day, int(hour), int(minute))
    return time.mktime(dt.timetuple())

def report_measurements(endpoint):
    ## Get the data collected so far
    try:
        with open(actual_temperature_file, 'r') as f:
            temperature = f.read()
    except:
        temperature = None

    try:
        with open(actual_humidity_file, 'r') as f:
            humidity = f.read()
    except:
        humidity = None

    try:
        with open(actual_co2_file, 'r') as f:
            co2 = f.read()
    except:
        co2 = None

    buf = "%s,%s,%s,%s" % (time.strftime("%FT%T"),
                           temperature,
                           humidity,
                           co2)
    for relay in range(1,max_relay+1):
        buf += ",%s" % (get_desired(relay))

    field['data']= buf

    ## Get the ifconfig for ease of use
    try:
        ifconfig=os.popen('/sbin/ifconfig').read()
        field['ifconfig'] = ifconfig
    except:
        pass

    c = pycurl.Curl()
    c.setopt(c.URL, endpoint)
    c.setopt(pycurl.TIMEOUT_MS, curl_timeout_ms) # 
    c.setopt(c.POSTFIELDS, urllib.urlencode(field))
    c.setopt(pycurl.WRITEFUNCTION, outbuf.write)
    c.perform()

    ## Now get the result from the call.  It should be two floats, Temp
    ## and Humidity


    line = outbuf.getvalue()
    vals = json.loads(line)

    if 'desired_temperature' in vals:
        desired_temperature = vals['desired_temperature']
        with open(desired_temperature_file, 'w') as f:
            ## Write min and max
            f.write( '%0.1f\n' % (desired_temperature - 2.0))
            f.write( '%0.1f\n' % (desired_temperature + 2.0))
        
    if 'desired_humidity' in vals:
        desired_humidity=vals['desired_humidity']
        with open(desired_humidity_file, 'w') as f:
            ## Write min and max
            f.write( '%0.1f\n' % (desired_humidity - 5.0))
            f.write( '%0.1f\n' % (desired_humidity + 5.0))

    if 'desired_co2' in vals:
        desired_co2=vals['desired_co2']
        with open(desired_co2_file, 'w') as f:
            ## Write min and max
            f.write( '%0.1f\n' % (desired_co2 - 5.0))
            f.write( '%0.1f\n' % (desired_co2 + 5.0))

    if 'desired_light_on' in vals and 'desired_light_off' in vals:
        desired_light_on=vals['desired_light_on']
        desired_light_off=vals['desired_light_off']
        with open(desired_light_file, 'w') as f:
            f.write( '%f\n' % (set_hour_minute(desired_light_on)))
            f.write( '%f\n' % (set_hour_minute(desired_light_off)))

    for i in range(1,max_relay+1):
        try:
            with open('%s%d' % (desired_relay_file, i), 'w') as f:
                v = vals["desired_relay%d" % (i)]
                if v == None:
                    f.write('off')
                else:
                    f.write(v)
        except:
            pass

### Configure
Config = ConfigParser.ConfigParser()
Config.read('/usr/local/bin/tomato.ini')

actual_temperature_file = Config.get('files', 'actual_temperature_file')
actual_humidity_file = Config.get('files', 'actual_humidity_file')
actual_co2_file = Config.get('files', 'actual_co2_file')

desired_temperature_file = Config.get('files', 'desired_temperature_file')
desired_humidity_file = Config.get('files', 'desired_humidity_file')
desired_co2_file = Config.get('files', 'desired_co2_file')
desired_relay_file = Config.get('files', 'desired_relay_file')
desired_light_file = Config.get('files', 'desired_light_file')

max_relay = int(Config.get('relays', 'max_relay'))

endpoint = Config.get('server', 'endpoint')
curl_timeout_ms = int(Config.get('server', 'curl_timeout_ms'))

if __name__ ==  '__main__':
    report_measurements(endpoint)
