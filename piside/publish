#!/usr/bin/python
#
# This file works with the 'phytonaut.py file.  It uploads
# measurements on url encoded form to the server and gets the desired
# conrol values back.

import StringIO
import json
import os
import pycurl
import sys
import urllib
import datetime
import time

desired_temperature_file='/tmp/desired_temperature'
desired_humidity_file='/tmp/desired_humudity'
desired_relay_file='/tmp/desired_relay'
desired_light_file='/tmp/desired_light'

actual_temperature_file='/tmp/actual_temperature'
actual_humidity_file='/tmp/actual_humudity'
actual_co2_file='/tmp/actual_co2'


outbuf = StringIO.StringIO()

field = {}
max_relay = 4
curl_timeout_ms = 3000

def get_desired(relay_num):
    if relay_num < 1 or relay_num > max_relay:
        return 'off'
    try:
        with open('%s%d' % (desired_relay_file, relay_num), 'r') as f:
            val=f.read().strip()
    except:
        val = 'off'
    return val

def set_hour_minute(timestring):
    now=datetime.datetime.now()
    hour, minute, second = timestring.split(':')
    dt = datetime.datetime(now.year, now.month, now.day, int(hour), int(minute))
    return time.mktime(dt.timetuple())

def report_measurements(endpoint):
    ## Get the data collected so far
    with open(actual_temperature_file, 'r') as f:
        temperature = f.read()
    with open(actual_humidity_file, 'r') as f:
        humidity = f.read()

    buf = "%s,%s,%s" % (time.strftime("%FT%T"),
                              temperature,
                              humidity)
    for relay in range(1,max_relay+1):
        buf += ",%s" % (get_desired(relay))

    field['data']= buf

    ## Get the ifconfig for ease of use
    try:
        ifconfig=os.popen('/sbin/ifconfig').read()
        field['ifconfig'] = ifconfig
    except:
        pass

    c = pycurl.Curl()
    c.setopt(c.URL, endpoint)
    c.setopt(pycurl.TIMEOUT_MS, curl_timeout_ms) # 
    c.setopt(c.POSTFIELDS, urllib.urlencode(field))
    c.setopt(pycurl.WRITEFUNCTION, outbuf.write)
    c.perform()

    ## Now get the result from the call.  It should be two floats, Temp
    ## and Humidity


    line = outbuf.getvalue()
    vals = json.loads(line)
    desired_temperature=vals['desired_temperature']
    desired_humidity=vals['desired_humidity']
    desired_light_on=vals['desired_light_on']
    desired_light_off=vals['desired_light_off']

    with open(desired_temperature_file, 'w') as f:
        ## Write min and max
        f.write( '%0.1f\n' % (desired_temperature - 2.0))
        f.write( '%0.1f\n' % (desired_temperature + 2.0))

    with open(desired_humidity_file, 'w') as f:
        ## Write min and max
        f.write( '%0.1f\n' % (desired_humidity - 5.0))
        f.write( '%0.1f\n' % (desired_humidity + 5.0))

    with open(desired_light_file, 'w') as f:
        f.write( '%f\n' % (set_hour_minute(desired_light_on)))
        f.write( '%f\n' % (set_hour_minute(desired_light_off)))

    for i in range(1,max_relay+1):
        with open('%s%d' % (desired_relay_file, i), 'w') as f:
            v = vals["desired_relay%d" % (i)]
            if v == None:
                f.write('off')
            else:
                f.write(v)

if __name__ ==  '__main__':
    # If the first arg is 'test' we fake the data
    if len(sys.argv) > 1 and sys.argv[1] == 'test':
        report_measurements('http://127.0.0.1/measurements')
    else:
        report_measurements('http://phytonaut/measurements')
