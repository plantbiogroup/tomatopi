#!/usr/bin/python
#
#   = = A N A L Y Z E = =
#
# This module compares an actual value to
# a minimum value and a maximum value.
# The actual value is stored in a file.
# The minimum and the maximum values ar stored in a
# two line file.  The minimum on the firs line.  The
# maximum on the second line.
# If the actual value falls below the minimum value,
# 'on' is written to the desired_relay_file.
# If the actual value rises above the maximum value,
# 'off' is written to the desired_relay_file.

import datetime
import time
import ConfigParser


def num(str):
    try:
        return int(str)
    except:
        return float(str)

def set_relay(file, value):
    with open(file, 'w') as f:
        f.write(value)

def maintain_range(desiredfile, actualfile, relayfile):
    '''Actuate when desired value is outside of range.'''
    try:
        with open(actualfile, 'r') as f:
            actual = num(f.read().strip())
    except:
        return None             # No actual value.  Abort
    try:
        with open(desiredfile, 'r') as f:
            minimum = num(f.readline().strip())
            maximum = num(f.readline().strip())
    except:
        return None             # No desired value.  Abort
    
    if (actual < minimum):
        set_relay(relayfile, 'on')
    elif actual > maximum:
        set_relay(relayfile, 'off')

def on_within_range(desiredfile, actualfile, relayfile):
    '''Actuate when actual value comes within desired range.'''
    try:
        with open(actualfile, 'r') as f:
            actual = num(f.read().strip())
    except:
        return None             # No actual value.  Abort
    try:
        with open(desiredfile, 'r') as f:
            minimum = num(f.readline().strip())
            maximum = num(f.readline().strip())
    except:
        return None             # No desired value.  Abort
    
    if (actual >= minimum) and (actual <= maximum):
        set_relay(relayfile, 'on')
    else:
        set_relay(relayfile, 'off')

def on_outside_range(desiredfile, actualfile, relayfile):
    '''Actuate when actual value comes within desired range.'''
    try:
        with open(actualfile, 'r') as f:
            actual = num(f.read().strip())
    except:
        return None             # No actual value.  Abort
    try:
        with open(desiredfile, 'r') as f:
            minimum = num(f.readline().strip())
            maximum = num(f.readline().strip())
    except:
        return None             # No desired value.  Abort
    
    if (actual <= minimum) or (actual >= maximum):
        set_relay(relayfile, 'on')
    else:
        set_relay(relayfile, 'off')


Config = ConfigParser.ConfigParser()
Config.read('/usr/local/bin/tomato.ini')

actual_temperature_file = Config.get('files', 'actual_temperature_file')
actual_humidity_file = Config.get('files', 'actual_humidity_file')
actual_co2_file = Config.get('files', 'actual_co2_file')

desired_temperature_file = Config.get('files', 'desired_temperature_file')
desired_humidity_file = Config.get('files', 'desired_humidity_file')
desired_co2_file = Config.get('files', 'desired_co2_file')
desired_relay_file = Config.get('files', 'desired_relay_file')
desired_light_file = Config.get('files', 'desired_light_file')

now = datetime.datetime.now()


## Relay 1, light
with open('/tmp/now', 'w') as f:
    f.write("%f\n" % (time.time()))

on_within_range(desired_light_file, '/tmp/now', '/tmp/desired_relay1')

## Relay 2 Heat
maintain_range(desired_temperature_file, actual_temperature_file, '/tmp/desired_relay2')

## Relay 3 Humidity
maintain_range(desired_humidity_file, actual_humidity_file, '/tmp/desired_relay3')

## Relay 4 CO2
maintain_range(desired_co2_file, actual_co2_file, '/tmp/desired_relay4')
